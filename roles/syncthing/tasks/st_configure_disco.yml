---

#
# If you are running an instance of Syncthing on the discovery server, you
# must either add that instance to other devices using a static address or
# bind the discovery server and Syncthing instances to different IP
# addresses.
#
# :8443 - default listen port
# :19200 - default replication listen port
#
# It is possible to only allow incoming connections from a peer without
# establishing an outgoing replication connection. To do so, give only the
# device ID without “@ip:port” address:
# $ stdiscosrv -replicate=I6K...H76 <other options>
#

# Extraneous "when" statements are kept as `flush_handlers` won't work
# with the conditionals on the top level.
# https://github.com/ansible/ansible/issues/41313

- name: 'Register parameters of the "syncthing" user'
  user:
    name: 'syncthing'
  register: st_syncthing_user_stat_disco

- name: Assert that user exists (not a bug)
  assert:
    that: st_syncthing_user_stat_disco.state == 'present'
    fail_msg: >
      Unable to provision Discovery-server for the non-existing user "syncthing"

# Don't remove! Wreaks havoc in addition to being insecure.
- name: Assert that user does not have UID zero
  assert:
    that: st_syncthing_user_stat_disco.uid | int != 0
    fail_msg: >
      User "syncthing" has UID 0.
      This is insecure and installation _will_ break. Aborting.
    success_msg: >
      User "syncthing" has UID {{ st_syncthing_user_stat_disco.uid }}

- name: (Block) Save certificates
  block:

  - name: Create certs folder
    file:
      path: '{{ st_certs_path }}/disco'
      state: directory
    delegate_to: localhost
    become: True
    become_user: '{{ lookup("env", "USER") }}'

  - name: Slurp existing certificates
    slurp:
      src: '{{ item }}'
    with_items:
      - '/var/lib/syncthing/discosrv/cert.pem'
      - '/var/lib/syncthing/discosrv/key.pem'
    register: st_disco_certs_slurped
    no_log: true

  - name: Cleanup slurped content
    set_fact:
      st_disco_certs_slurped_decoded: >
        {{ st_disco_certs_slurped_decoded | default([])
        + [item['content'] | b64decode] }}
    with_items: '{{ st_disco_certs_slurped.results }}'
    no_log: true

  - name: (Block) Execute on localhost
    block:

    - name: Encipher certificate content
      shell:
        # The following won't work:
        # --output {{ st_certs_path }}/disco/cert.pem "{{ var }}"
        # ref. https://github.com/ansible/ansible/issues/75101
        cmd: >
          ansible-vault encrypt_string
          --vault-password-file {{ vault_pass_file }}
          --output - "{{ st_disco_certs_slurped_decoded[0] }}"
        chdir: '{{ playbook_dir }}'
      register: st_disco_cert_encrypted
      no_log: true

    - name: Encipher key content
      shell:
        cmd: >
          ansible-vault encrypt_string
          --vault-password-file {{ vault_pass_file }}
          --output - "{{ st_disco_certs_slurped_decoded[1] }}"
        chdir: '{{ playbook_dir }}'
      register: st_disco_key_encrypted
      no_log: true

    - name: Save certificate to disk
      copy:
        dest: '{{ st_certs_path }}/disco/cert.pem'
        decrypt: False
        content: >
          {{ st_disco_cert_encrypted.stdout_lines[1:]
          | join('')
          | regex_replace('^\s+\$', '$')
          | regex_replace('\s{10}', '\n') }}

    - name: Save key to disk
      copy:
        dest: '{{ st_certs_path }}/disco/key.pem'
        decrypt: False
        content: >
          {{ st_disco_key_encrypted.stdout_lines[1:]
          | join('')
          | regex_replace('^\s+\$', '$')
          | regex_replace('\s{10}', '\n') }}

    delegate_to: localhost
    become: True
    become_user: '{{ lookup("env", "USER") }}'
    # block_end (localhost / local user)

  when: st_disco.certs_import and st_disco_remote_certs_exist
  tags:
    - st_certs
    - st_certs_import
  # block_end (save certs)

- name: Remove existing Disco certificates
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '/var/lib/syncthing/discosrv/cert.pem'
    - '/var/lib/syncthing/discosrv/key.pem'
  when: st_disco.certs_recreate

- name: Provision discovery server template
  template:
    src: stdiscosrv.service.j2
    dest: /lib/systemd/system/syncthing-discosrv.service
    owner: root
    mode: 0644
  become: True
  become_user: root
  notify:
    - 'reload systemd'
    - 'restart disco'
  when: st_install_disco

- name: Export locally saved certificates
  copy:
    src: '{{ st_certs_path }}/{{ item.src }}'
    dest: '{{ item.dest }}'
    decrypt: true
  with_items:
    - { 'src': 'disco/cert.pem',
        'dest': '/var/lib/syncthing/discosrv/cert.pem' }
    - { 'src': 'disco/key.pem',
        'dest': '/var/lib/syncthing/discosrv/key.pem' }
  when: st_disco.certs_export
  no_log: true
  tags:
    - st_certs
    - st_certs_export

  # Tell `systemd` to pick-up the updated unit, running directly as calling the
  # `- meta: flush_handlers` will inevitably call the same handler from the base role.
- name: Reload systemd
  systemd:
    daemon_reexec: True
    daemon_reload: True
  become: True
  become_user: root

- name: Start Discovery service
  systemd:
    name: 'syncthing-discosrv.service'
    enabled: True
    masked: False
    state: started

- name: Register device ID of the Discovery server
  ansible.builtin.command:
    cmd: stdiscosrv
    chdir: /var/lib/syncthing/discosrv
  become_user: syncthing
  become: true
  register: st_disco_out
  failed_when: '"Server device ID" not in st_disco_out.stdout'
  changed_when: False

- name: Extract ID
  set_fact:
    st_disco: '{{ st_disco | combine({"id":st_disco_out.stdout
                | regex_search("\sID\sis\s(\w{7}-\w{7}-\w{7}-\w{7}-\w{7}-\w{7}-\w{7}-\w{7})",
                "\1", multiline=True)
                | join("")}) }}'

- name: Assert ID length
  assert:
    that:
      - st_disco.id | length == 63
    success_msg: 'ID is OK: {{ st_disco.id }}'
    fail_msg: 'ID length is incorrect, here is what we`ve got: {{ st_disco.id }}'
