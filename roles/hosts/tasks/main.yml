---

#
# WARNING: Note the usage of hard <Tab> in the strings!
#

- name: (Block) Interrogate all hosts
  block:

  - name: Register hosts status
    wait_for_connection:
      timeout: 1
    loop: '{{ groups["all"] }}'
    delegate_to: '{{ item }}'
    run_once: True
    ignore_unreachable: True
    ignore_errors: True
    when: item != 'localhost' and item != lookup('pipe','hostname')
    register: hosts_status

  - name: Create list of alive hosts
    set_fact:
      hosts_alive: '{{ hosts_alive | default([]) + [item.item] }}'
      groups_alive: []
    with_items: '{{ hosts_status.results }}'
    loop_control:
      label: '{{ item.item }}'
    when: >
      not item.failed | default(False)
      and not item.skipped | default(False)

  - name: Register groups list without the dead hosts...
    set_fact:
      groups_alive: >
        {{ groups_alive | default([]) +
        [{'key':item.key,'value':item.value | intersect(hosts_alive)}]
        }}
    loop: "{{ groups | dict2items }}"
    loop_control:
      label: '{{ item.key }}'

  - name: ...and convert list of lists to the dictionary
    set_fact:
      groups_alive: '{{ groups_alive | items2dict }}'

  - name: Register information about the whole inventory
    setup:
    delegate_to: "{{ item }}"
    delegate_facts: true
    loop: "{{ groups_alive['all'] }}"
    run_once: True
    when: item != 'localhost' and item != lookup('pipe','hostname')

  - name: Register hostnames and addresses
    set_fact:
      hosts_data: >
        {{ hosts_data | combine({
        'host': hostvars[inventory_hostname]["inventory_hostname"],
        'addr': hostvars[inventory_hostname]["ansible_host"]}) }}

  - name: Prepare combined list of hosts
    set_fact:
      hosts_combined:
        "{{ hosts_combined
        + [hostvars[item]['ansible_host'] + '	' + item] }}"
    with_items: '{{ groups_alive["all"] }}'
    when: item not in ['localhost', '127.0.0.1', '127.0.1.1']
    delegate_to: localhost

  when: >
    hosts_local_all or hosts_remote_all
    or hosts_remote_groups or hosts_local_groups
    or hosts_remote_same_group

# Local ----------------------------------------------------------------------

- name: Clean-up local /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: '^\s*(?!127\.)\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+.+\s*$'
    state: absent
    backup: False
  when: hosts_local_rewrite
  delegate_to: localhost
  become: True
  become_user: root
  throttle: 1

- name: Add whole inventory to the local /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: '^\s*\d+\.\d+\.\d+\.\d+\s+{{ _host }}\s*$'
    line:
      "{{ item }}"
    state: present
    backup: False
  with_items: "{{ hosts_combined | sort }}"
  when:
    'hosts_local_all and _host != "localhost" and
    _host != hostvars["localhost"]["inventory_hostname"]
    and _host != inventory_hostname'
  delegate_to: localhost
  connection: local
  become: True
  become_user: root
  # `lineinfile` can miss lines w/o being throttled on localhost
  throttle: 1
  vars:
    _host: '{{ item.split("	")[1] }}'

- name: Add selected group(s) to the local /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: '^\s*\d+\.\d+\.\d+\.\d+\s+{{ item[0].split("	")[1] }}\s*$'
    line:
      "{{ item[0] }}"
    state: present
    backup: False
  with_nested:
    - '{{ hosts_combined | sort }}'
    - '{{ hosts_local_groups }}'
  when:
    '_host in groups[_host_group] | default([]) and
    _host != hostvars["localhost"]["ansible_hostname"]
    and _host != "localhost"'
  delegate_to: localhost
  become: True
  become_user: root
  throttle: 1
  vars:
    _host: '{{ item[0].split("	")[1] }}'
    _host_group: '{{ item[1] }}'
    _groups: '{{ groups[_host_group] }}'

# Remote ----------------------------------------------------------------------

- name: Clean-up remote /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: '^\s*(?!127\.)\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+.+\s*$'
    state: absent
    backup: False
  when:
    'hosts_remote_rewrite and
    ansible_hostname != "localhost" and
    ansible_hostname != lookup("pipe","hostname") and
    hostvars[inventory_hostname]["ansible_env"]["SSH_CLIENT"] is defined and
    hostvars[inventory_hostname]["ansible_env"]["SSH_CONNECTION"] is defined'
  become: True
  become_user: root

- name: Add whole inventory to remote /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: '^\s*\d+\.\d+\.\d+\.\d+\s+{{ item.split("	")[1] }}\s*$'
    line:
      "{{ item }}"
    state: present
    backup: False
  with_items: "{{ hosts_combined | sort }}"
  when:
    'hosts_remote_all and _host != ansible_hostname and
    _host != hostvars["localhost"]["ansible_hostname"]
    and _host != "localhost"'
  become: True
  become_user: root
  vars:
    _host: '{{ item.split("	")[1] }}'

- name: (Block) Selective add
  block:

  - name: Add selected group(s) to the remote /etc/hosts
    lineinfile:
      path: /etc/hosts
      regexp: '^\s*\d+\.\d+\.\d+\.\d+\s+{{ item[0].split("	")[1] }}\s*$'
      line:
        "{{ item[0] }}"
      state: present
      backup: False
    with_nested:
      - '{{ hosts_combined | sort }}'
      - '{{ hosts_remote_groups }}'
    when:
      '_host != ansible_hostname and
      _host in groups[_host_group] | default([]) and
      _host != hostvars["localhost"]["ansible_hostname"]
      and _host != "localhost"'
    become: True
    become_user: root
    vars:
      _host: '{{ item[0].split("	")[1] }}'
      _host_group: '{{ item[1] }}'
      _groups: '{{ groups[_host_group] }}'

  - name: Add hosts from the same group as the remote
    lineinfile:
      path: /etc/hosts
      regexp: '^\s*\d+\.\d+\.\d+\.\d+\s+{{ item.split("	")[1] }}\s*$'
      line:
        "{{ item }}"
      state: present
      backup: False
    with_items:
      - '{{ hosts_combined | sort }}'
    loop_control:
      label: '{{ _host }} {{ _addr }}'
    when:
      'hostvars[inventory_hostname]["group_names"]
      | intersect(hostvars[_host]["group_names"])
      | length > 0 and _host != inventory_hostname and
      _host != hostvars["localhost"]["inventory_hostname"]
      and _host != "localhost" and hosts_remote_same_group
      and _addr != "localhost"'
    become: True
    become_user: root
    vars:
      _host: '{{ item.split("	")[1] }}'
      _addr: '{{ item.split("	")[0] }}'

  when: not hosts_remote_all
  # block_end (add whole inventory)

- name: Add remote node to its own /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: >
      ^\s*\d+\.\d+\.\d+\.\d+\s+
      {{ hostvars[inventory_hostname]["ansible_hostname"] }}\s*$
    line:
      "{{ hostvars[inventory_hostname]['ansible_host'] }}\t{{ hostvars[inventory_hostname]['ansible_hostname'] }}"
    state: present
    backup: False
  when: >
    hosts_remote_self and
    hostvars[inventory_hostname]['ansible_host'] not in
    ['localhost', '127.0.0.1', '127.0.1.1']
  become: True
  become_user: root
